knitr::opts_chunk$set(echo = TRUE)
sampleX = runif(10000,0,10) # a random sample
hist(sampleX,breaks=20, freq =FALSE) # the histogram of the random sample gives an "empirical" distribution plot
Omega = seq(0,10,0.05) # this is (approximately) the sample space for Unif[0,10]
fOmega = dunif(Omega,0,10) # and this transform gives us the density function f(x) for each value x in the sample space Omega
lines(Omega,fOmega, col="blue", lwd = 4) # a line plot with x values from Omeaga, and y values of fOmega: this plots the theoretical uniform density function as a thick blue line.
X = runif(256, min = 0, max=10)
hist(X, freq=FALSE, breaks=seq(-0.5,10.5,0.5))
Xbar = mean(X)
Xbar
ï¼Ÿseq
omega = seq(0, 10, 0.05)
omega
ManyXbar = replicate( 10000,mean( runif(256, 0, 10) ) )
hist(ManyXbar, freq = FALSE, breaks = seq(4,6,0.01), col="grey" ) # plot the histogram again
possibleXbar = seq(4,6,0.01) # This is a vector of possible values of the sample mean (within a couple standard errors of mu)
densitiesFromCLT = dnorm(possibleXbar, mu , SE) #The probability density associated with each of the possible Xbars. Here mu = 5, SE = 0.1804
set.seed(592)
#200 students were absent from the exam.
Absent = rep(0,200)
#400 students just guessed, so have a a 1/4 chance of success on each question
Guessed = rbinom(400,100,1/4)
#1400 students studied -- they have an average score of 80 with standard deviation of 20.  The pmax ensures the score is never over 100, pmin ensures it's never below 0, and round makes this an integer score.
Studied = round(pmax(pmin(rnorm(1400,80,20),100),0))
#Combine the different groups of students into one population
Population = c(Absent,Guessed,Studied)
# view the distribution: note you can see 3 "modes" from the 3 combined distributions
hist(Population,breaks=seq(-5.5,105.5,5))
demo_sample_sizes = c(30,30,30,100,100)
demo_sample_means = c()
for(n in demo_sample_sizes){
resample = sample(Population, n)
demo_sample_means = c(demo_sample_means, mean(resample))
}
# IMPORTANT: replace this comment with your code to plot the scatterplot of sample sizes vs sample mean. Running this code without it will throw an error!!!
# ALSO IMPORTANT: Change this to eval=TRUE or the code output will not be included in your knit HTML and I won't be able to grade your work!!!
n = seq(0,1000,10)
lines(x = n,y = rep( mean(Population), length(n) ),col="blue", lwd=2)             # adds the population mean in blue
# IMPORTANT: replace this comment with your code to plot the scatterplot of sample sizes vs sample mean. Running this code without it will throw an error!!!
# ALSO IMPORTANT: Change this to eval=TRUE or the code output will not be included in your knit HTML and I won't be able to grade your work!!!
n = seq(0,1000,10)
lines(x = n,y = rep( mean(Population), length(n) ),col="blue", lwd=2)             # adds the population mean in blue
hist(ManyXbar, freq = FALSE, breaks = seq(4,6,0.01), col="grey" ) # plot the histogram again
possibleXbar = seq(4,6,0.01) # This is a vector of possible values of the sample mean (within a couple standard errors of mu)
densitiesFromCLT = dnorm(possibleXbar, mu , SE) #The probability density associated with each of the possible Xbars. Here mu = 5, SE = 0.1804
knitr::opts_chunk$set(echo = TRUE)
hist(ManyXbar, freq = FALSE, breaks = seq(4,6,0.01), col="grey" ) # plot the histogram again
knitr::opts_chunk$set(echo = TRUE)
hist(ManyXbar, freq = FALSE, breaks = seq(4,6,0.01), col="grey" ) # plot the histogram again
hist(ManyXbar, freq = FALSE, breaks = seq(4,6,0.01) )
X = runif(256, min = 0, max=10)
hist(X, freq=FALSE, breaks=seq(-0.5,10.5,0.5))
Xbar = mean(X)
Xbar
ManyXbar = replicate( 10000,mean( runif(256, 0, 10) ) )
hist(ManyXbar, freq = FALSE, breaks = seq(4,6,0.01) )
hist(ManyXbar, freq = FALSE, breaks = seq(4,6,0.01), col="grey" ) # plot the histogram again
possibleXbar = seq(4,6,0.01) # This is a vector of possible values of the sample mean (within a couple standard errors of mu)
densitiesFromCLT = dnorm(possibleXbar, mu , SE) #The probability density associated with each of the possible Xbars. Here mu = 5, SE = 0.1804
knitr::opts_chunk$set(echo = TRUE)
sampleX = runif(10000,0,10) # a random sample
hist(sampleX,breaks=20, freq =FALSE) # the histogram of the random sample gives an "empirical" distribution plot
Omega = seq(0,10,0.05) # this is (approximately) the sample space for Unif[0,10]
fOmega = dunif(Omega,0,10) # and this transform gives us the density function f(x) for each value x in the sample space Omega
lines(Omega,fOmega, col="blue", lwd = 4) # a line plot with x values from Omeaga, and y values of fOmega: this plots the theoretical uniform density function as a thick blue line.
mu = 5
SE = 0.1804
hist(ManyXbar, freq = FALSE, breaks = seq(4,6,0.01), col="grey" ) # plot the histogram again
possibleXbar = seq(4,6,0.01) # This is a vector of possible values of the sample mean (within a couple standard errors of mu)
densitiesFromCLT = dnorm(possibleXbar, mu , SE) #The probability density associated with each of the possible Xbars. Here mu = 5, SE = 0.1804
lines(x = possibleXbar, y=densitiesFromCLT, col="blue", lwd = 3) #plot the possible Xbar vs. its density as a thick blue curve.
?rpois
sampleArrivals = rpois(10000,20)
sampleArrivals
sampleArrivals = rpois(10000,20) # a random sample
hist(sampleArrivals,breaks=20, freq =FALSE) # the histogram of the random sample gives an "empirical" distribution plot
Omega = seq(0,10,0.05) # this is (approximately) the sample space for Unif[0,10]
fOmega = dunif(Omega,0,10) # and this transform gives us the density function f(x) for each value x in the sample space Omega
lines(Omega,fOmega, col="blue", lwd = 4) # a line plot with x values from Omeaga, and y values of fOmega: this plots the theoretical uniform density function
# Accuracy of sample mean estimates for sample size $n$
For this problem you'll work with a simulated population 2000 student's exam scores from a 100 question multiple choice (a,b,c,d) test. I generate this population below (in part to show additional uses of distributions and how they can be blended together). But for the problem, you can just directly refer to the dataset `Population`.
